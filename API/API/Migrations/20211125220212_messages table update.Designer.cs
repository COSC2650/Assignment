// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(ZipitContext))]
    [Migration("20211125220212_messages table update")]
    partial class messagestableupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("API.Models.ConfirmCode", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.ToTable("ConfirmCodes");
                });

            modelBuilder.Entity("API.Models.Listing", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ListingAvailability")
                        .HasColumnType("datetime");

                    b.Property<string>("ListingCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListingCondition")
                        .HasColumnType("text");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ListingDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ListingPostCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<decimal>("ListingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ListingTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ListingID");

                    b.HasIndex("UserID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<int>("MessaageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<string>("SenderLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MessaageID");

                    b.HasIndex("ListingID");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "User"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Premium"
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("UserEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserPasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserPostCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("UserState")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("UserStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Listing", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.Listing", "Listing")
                        .WithMany("Messages")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Listing", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
