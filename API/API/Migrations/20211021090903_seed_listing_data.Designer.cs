// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(ZipitContext))]
    [Migration("20211021090903_seed_listing_data")]
    partial class seed_listing_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("API.Models.Listing", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProdCondition")
                        .HasColumnType("text");

                    b.Property<DateTime>("ServAvailability")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ListingID");

                    b.HasIndex("UserID");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            ListingID = 1001,
                            Category = "Test Products",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 48, DateTimeKind.Utc).AddTicks(7460),
                            Description = "This is a test description for a test product 1.",
                            ImageURL = "https://picsum.photos/100?random=1",
                            ListingType = "Product",
                            PostCode = 2650,
                            Price = 1.00m,
                            ProdCondition = "Good",
                            ServAvailability = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test Product 1",
                            UserID = 1
                        },
                        new
                        {
                            ListingID = 1002,
                            Category = "Test Products",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1112),
                            Description = "This is a test description for a test product 2.",
                            ImageURL = "https://picsum.photos/100?random=2",
                            ListingType = "Product",
                            PostCode = 4000,
                            Price = 2.00m,
                            ProdCondition = "Fair",
                            ServAvailability = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test Product 2",
                            UserID = 1
                        },
                        new
                        {
                            ListingID = 1003,
                            Category = "Test Products",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1117),
                            Description = "This is a test description for test product 3.",
                            ImageURL = "https://picsum.photos/100?random=3",
                            ListingType = "Product",
                            PostCode = 2222,
                            Price = 3.00m,
                            ProdCondition = "Needs Repair",
                            ServAvailability = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test Product 3",
                            UserID = 3
                        },
                        new
                        {
                            ListingID = 1004,
                            Category = "Test Products",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1120),
                            Description = "This is a test description for a test product 4.",
                            ImageURL = "https://picsum.photos/100?random=4",
                            ListingType = "Product",
                            PostCode = 3232,
                            Price = 4.44m,
                            ProdCondition = "Fair",
                            ServAvailability = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test Product 4",
                            UserID = 3
                        },
                        new
                        {
                            ListingID = 1005,
                            Category = "Test Products",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1122),
                            Description = "This is a test description for a test product 5.",
                            ImageURL = "https://picsum.photos/100?random=5",
                            ListingType = "Product",
                            PostCode = 4154,
                            Price = 5.0m,
                            ProdCondition = "Excellent",
                            ServAvailability = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test Product 5",
                            UserID = 3
                        },
                        new
                        {
                            ListingID = 1006,
                            Category = "Test Services",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1124),
                            Description = "This is a test description for a test service 1.",
                            ImageURL = "https://picsum.photos/100?random=1",
                            ListingType = "Service",
                            PostCode = 4000,
                            Price = 6.0m,
                            ServAvailability = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1124),
                            Title = "Test Service 1",
                            UserID = 1
                        },
                        new
                        {
                            ListingID = 1007,
                            Category = "Test Services",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1717),
                            Description = "This is a test description for a test service 2.",
                            ImageURL = "https://picsum.photos/100?random=2",
                            ListingType = "Service",
                            PostCode = 3456,
                            Price = 7.0m,
                            ServAvailability = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1718),
                            Title = "Test Service 2",
                            UserID = 1
                        },
                        new
                        {
                            ListingID = 1008,
                            Category = "Test Services",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1720),
                            Description = "This is a test description for a test service 3.",
                            ImageURL = "https://picsum.photos/100?random=3",
                            ListingType = "Service",
                            PostCode = 2560,
                            Price = 8.89m,
                            ServAvailability = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1720),
                            Title = "Test Service 3",
                            UserID = 1
                        },
                        new
                        {
                            ListingID = 1009,
                            Category = "Test Services",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1722),
                            Description = "This is a test description for a test service 4.",
                            ImageURL = "https://picsum.photos/100?random=4",
                            ListingType = "Service",
                            PostCode = 3000,
                            Price = 8.89m,
                            ServAvailability = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1722),
                            Title = "Test Service 4",
                            UserID = 3
                        },
                        new
                        {
                            ListingID = 1010,
                            Category = "Test Services",
                            DateListed = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1724),
                            Description = "This is a test description for a test service 5.",
                            ImageURL = "https://picsum.photos/100?random=5",
                            ListingType = "Service",
                            PostCode = 4000,
                            Price = 10.99m,
                            ServAvailability = new DateTime(2021, 10, 21, 9, 9, 3, 49, DateTimeKind.Utc).AddTicks(1724),
                            Title = "Test Service 5",
                            UserID = 3
                        });
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("EmailVerfied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Listing", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
