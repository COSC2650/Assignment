name: Build
on:
    push:
        branches:
            - master
    pull_request:
        types: [opened, synchronize, reopened]
jobs:
    files_changed:
        name: Check changes
        runs-on: ubuntu-latest
        outputs:
            api_changes: ${{ steps.changes.outputs.api_changes }}
            ui_changes: ${{ steps.changes.outputs.ui_changes }}
        steps:
            - uses: actions/checkout@v2
            - uses: dorny/paths-filter@v2
              id: changes
              with:
                  filters: |
                      api_changes:
                        - 'API/**'
                        - Dockerfile
                      ui_changes:
                        - 'UI/**'
    sonar_scan:
        name: Build and SonarCloud Scan
        runs-on: ubuntu-latest
        needs: files_changed
        if: needs.files_changed.outputs.api_changes == 'true'
        outputs:
            result: ${{ job.status }}
        steps:
            - name: Set up JDK 11
              uses: actions/setup-java@v1
              with:
                  java-version: 1.11
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - name: Cache SonarCloud packages
              uses: actions/cache@v1
              with:
                  path: ~/sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Cache SonarCloud scanner
              id: cache-sonar-scanner
              uses: actions/cache@v1
              with:
                  path: ./.sonar/scanner
                  key: ${{ runner.os }}-sonar-scanner
                  restore-keys: ${{ runner.os }}-sonar-scanner
            - name: Install SonarCloud scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              run: |
                  if [ ! -d ./.sonar/scanner ]; then mkdir -p ./.sonar/scanner; fi 
                  dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
            - name: Build and analyze
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  ./.sonar/scanner/dotnet-sonarscanner begin /k:"COSC2650_Assignment" /o:"cosc2650" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.coverage.exclusions="API/Program.cs","API/Startup.cs"

                  if [ "$GITHUB_REF" = "refs/heads/main" ]; then configuration="Release"; else configuration="Debug"; fi

                  dotnet clean ./API/API.sln
                  dotnet build ./API/API.sln -c "$configuration"
                  dotnet test ./API/API.sln -c "$configuration" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
                  dotnet publish ./API/API/API.csproj -c "$configuration" -o out

                  ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
            - name: Upload API
              uses: actions/upload-artifact@v2
              with:
                  name: API
                  path: |
                    ./out/**/*
                    Dockerfile
    build_api:
        name: Build API
        runs-on: ubuntu-latest
        needs: sonar_scan
        if: needs.files_changed.outputs.api_changes == 'true'
        outputs:
            result: ${{ job.status }}
            digest: ${{ steps.docker_build.outputs.digest }}
        steps:
            - name: Download API
              uses: actions/download-artifact@v2
              with:
                  name: API
                  path: .
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: mkellock/cosc2650
                  tags: |
                      type=sha
                      type=ref,event=branch
                      type=ref,event=pr
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Build and push Docker images
              id: docker_build
              uses: docker/build-push-action@v2.7.0
              with:
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      GITHUB_REF=${{ github.ref }}
            - name: Create a Sentry.io release
              uses: getsentry/action-release@v1
              env:
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_ORG: cosc2650
                  SENTRY_PROJECT: assignment
              with:
                  version: ${{ github.sha }}
                  environment: "Production"
                  ignore_empty: true
    deploy_api:
        name: Deploy API
        runs-on: ubuntu-latest
        needs: build_api
        if: github.ref == 'refs/heads/main'
        outputs:
            result: ${{ job.status }}
        steps:
            - uses: actions/checkout@v2
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}
            - name: Update ECS image
              run: echo "$(jq ".containerDefinitions[0].image=\"mkellock/cosc2650@${{ needs.build_api.outputs.digest }}\"" ./IaC/ECS/task-definition.json)" > ./IaC/ECS/task-definition.json
            - name: Update ECS New Relic licence key
              run: echo "$(jq ".containerDefinitions[0].environment[0].value=\"${{ secrets.NEW_RELIC_LICENCE_KEY }}\"" ./IaC/ECS/task-definition.json)" > ./IaC/ECS/task-definition.json
            - name: Update CORS URLs
              run: echo "$(jq ".containerDefinitions[0].environment[1].value=\"${{ secrets.CORS_URLS }}\"" ./IaC/ECS/task-definition.json)" > ./IaC/ECS/task-definition.json
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ./IaC/ECS/task-definition.json
                  service: ${{ secrets.ECS_SERVICE }}
                  cluster: ${{ secrets.ECS_CLUSTER }}
                  wait-for-service-stability: false
    build_ui:
        name: Build UI
        runs-on: ubuntu-latest
        outputs:
            result: ${{ job.status }}
        defaults:
            run:
                working-directory: UI/zip-it
        needs: files_changed
        if: needs.files_changed.outputs.ui_changes == 'true'
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
            - name: Setup Node.js environment
              uses: actions/setup-node@v2.4.1
            - run: npm ci
            - run: npm run build --if-present
            - run: npm test
            - name: Upload UI
              uses: actions/upload-artifact@v2
              with:
                  name: UI
                  path: UI/zip-it/build/**/*
    deploy_ui:
        name: Deploy UI
        runs-on: ubuntu-latest
        needs: build_ui
        outputs:
            result: ${{ job.status }}
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Download UI
              uses: actions/download-artifact@v2
              with:
                  name: UI
                  path: build
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
            - name: Deploy to S3
              run: aws s3 sync . s3://${{ secrets.S3_BUCKET }}
              working-directory: build
            - name: Invalidate CloudFront cache
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
    finalise:
        name: Finalise
        runs-on: ubuntu-latest
        if: always()
        needs: [build_ui, deploy_ui, build_api, deploy_api, sonar_scan]
        steps:
            - name: Invalidate pipeline
              if: ${{ needs.sonar_scan.outputs.result == 'failure' || needs.build_ui.outputs.result == 'failure' || needs.deploy_ui.outputs.result == 'failure' || needs.build_api.outputs.result == 'failure' || needs.deploy_api.outputs.result == 'failure' }}
              run: |
                  exit 1
